<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">

    <SolidColorBrush x:Key="Default.Border" Color="Black"/>
    <SolidColorBrush x:Key="Default.Background" Color="#6495ED"/>
    <SolidColorBrush x:Key="Default.Foreground" Color="Black"/>
    <SolidColorBrush x:Key="TextBox.Default.Border.Error" Color="Red"/>

    <!-- DEFAULT COLOR -->
    <SolidColorBrush x:Key="Button.Admin.Default.Background" Color="#89CFF0"/>
    <SolidColorBrush x:Key="Button.Admin.Default.Background.Disabled" Color="#36454F"/>
    <SolidColorBrush x:Key="Button.Default.Pressed.Background" Color="#6082B6"/>
    <SolidColorBrush x:Key="Button.Default.Selected.Foreground" Color="White"/>
    <SolidColorBrush x:Key="Button.Default.Empty.Background" Color="#36454F"/>
    <SolidColorBrush x:Key="Button.Default.Empty.Pressed.Background" Color="LightSteelBlue"/>
    <SolidColorBrush x:Key="Toggle.Button.Default.Background" Color="#89CFF0"/>
    <SolidColorBrush x:Key="Toggle.Button.Default.IsChecked.Background" Color="#6082B6"/>
    <SolidColorBrush x:Key="Toggle.Button.Default.IsChecked.Border" Color="#89CFF0"/>
    <SolidColorBrush x:Key="TextBlock.Default.Foreground" Color="LightGray"/>
    <SolidColorBrush x:Key="TextBox.Default.Focus.Border" Color="Purple"/>
    <SolidColorBrush x:Key="Rectangle.Default.Background" Color="#36454F"/>


    <!-- END DEFAULT COLOR -->
    
    <!-- DEFAULT STYLE -->
    <!--#region  COMBO BOX -->
    <Style x:Key="ComboBoxDefaultToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" Background="{StaticResource Default.Background}" BorderBrush="{StaticResource Default.Border}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" Background="{StaticResource Default.Background}" BorderBrush="{StaticResource Default.Border}" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource Default.Border}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="Gray"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="black"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="black"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{StaticResource Default.Border}" BorderThickness="5">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{StaticResource Default.Background}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource ComboBoxDefaultToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="cmbBoxToggleDisplayDefaultTheme" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{StaticResource Default.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Default.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region LABEL AND TEXT BOX -->
    <Style x:Key="lblDisplayDefaultTheme" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{StaticResource Default.Background}"/>
        <Setter Property="Stroke" Value="{StaticResource Default.Border}"/>
        <Setter Property="StrokeThickness" Value="3"/>
        <Setter Property="RadiusX" Value="6"/>
        <Setter Property="RadiusY" Value="6"/>
    </Style>
    <Style x:Key="txtBoxDisplayDefaultTheme" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource Default.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Default.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource Default.Foreground}"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Padding" Value="4,4,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type TextBox}">
                <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                    <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Default.Focus.Border}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="txtBoxDisplayDefaultThemeSelected" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource Default.Background}"/>
        <Setter Property="BorderBrush" Value="Purple"/>
        <Setter Property="Foreground" Value="{StaticResource Default.Foreground}"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Padding" Value="4,4,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Default.Focus.Border}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="txtBoxDisplayThemeError" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource Default.Background}"/>
        <Setter Property="BorderBrush" Value="Red"/>
        <Setter Property="Foreground" Value="{StaticResource Default.Foreground}"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Padding" Value="4,4,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Default.Focus.Border}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="txtBlockDefaultTheme" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextBlock.Default.Foreground}"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontWeight" Value="UltraBlack"/>
    </Style>
    <Style x:Key="scrlViewDefaultTheme" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Background" Value="{StaticResource Rectangle.Default.Background}"/>
    </Style>
    <!--#endregion-->
    <!--#region BUTTONS -->
    <Style x:Key="btnDefaultQuickTheme" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Default.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Default.Border}"/>
        <Setter Property="BorderThickness" Value="5"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Default.Foreground}"/>
        <Setter Property="FontWeight" Value="UltraBlack"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Cooper Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10,10,10,10">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Default.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Default.Border}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="10"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Admin.Default.Background.Disabled}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Default.Border}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="10"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnDefaulForegroundSelectTheme" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="{StaticResource Button.Default.Border}"/>
        <Setter Property="BorderThickness" Value="5"/>
        <Setter Property="FontWeight" Value="UltraBlack"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Cooper Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10,10,10,10">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnDefaultAdminTheme" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Button.Admin.Default.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Default.Border}"/>
        <Setter Property="BorderThickness" Value="5"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Default.Foreground}"/>
        <Setter Property="FontWeight" Value="UltraBlack"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Cooper Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10,10,10,10">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Default.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Default.Border}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="10"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Admin.Default.Background.Disabled}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Default.Border}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="10"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnDefaultSelectedtAdminTheme" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Button.Admin.Default.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Default.Border}"/>
        <Setter Property="BorderThickness" Value="5"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Default.Selected.Foreground}"/>
        <Setter Property="FontWeight" Value="UltraBlack"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Cooper Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10,10,10,10">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Default.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Default.Border}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="10"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnDefaultEmptyTheme" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Button.Default.Empty.Background}"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Default.Foreground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Default.Border}"/>
        <Setter Property="BorderThickness" Value="5"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10,10,10,10">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Default.Empty.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Default.Border}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="10"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="tglDefaultTheme" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource Toggle.Button.Default.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Default.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource Default.Foreground}"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="UltraBlack"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{StaticResource Toggle.Button.Default.IsChecked.Background}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource Default.Border}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Toggle.Button.Default.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Default.Border}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="3"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Toggle.Button.Default.IsChecked.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="rectDefaultTheme" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{StaticResource Rectangle.Default.Background}"/>
        <Setter Property="Stroke" Value="{StaticResource Default.Border}"/>
        <Setter Property="StrokeThickness" Value="5"/>
        <Setter Property="RadiusX" Value="15"/>
        <Setter Property="RadiusY" Value="15"/>
    </Style>
    <Style x:Key="brdDefaultTheme" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource Default.Border}"/>
        <Setter Property="BorderThickness" Value="5"/>
    </Style>
    <!--#endregion-->
    <!-- END DEFAULT STYLE -->

</ResourceDictionary>